#include <iostream>
#include <pcap.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include "myheader.h"

void processPacket(const struct pcap_pkthdr *header, const u_char *packet) {
    struct ethheader *eth = (struct ethheader *)packet;
    if (ntohs(eth->ether_type) == 0x0800) { // IPv4 packet
        struct ipheader *ip = (struct ipheader *)(packet + sizeof(struct ethheader));
        if (ip->iph_protocol == IPPROTO_TCP) { // TCP packet
            struct tcphdr *tcp = (struct tcphdr *)(packet + sizeof(struct ethheader) + ip->iph_ihl * 4);

            // 출력: Ethernet 헤더 정보
            std::cout << "Ethernet Header:" << std::endl;
            std::cout << "Src MAC: ";
            for (int i = 0; i < 6; i++) {
                printf("%02x", eth->ether_shost[i]);
                if (i < 5) std::cout << ":";
            }
            std::cout << std::endl;
            std::cout << "Dst MAC: ";
            for (int i = 0; i < 6; i++) {
                printf("%02x", eth->ether_dhost[i]);
                if (i < 5) std::cout << ":";
            }
            std::cout << std::endl;

            // 출력: IP 헤더 정보
            std::cout << "IP Header:" << std::endl;
            std::cout << "Src IP: " << inet_ntoa(ip->iph_sourceip) << std::endl;
            std::cout << "Dst IP: " << inet_ntoa(ip->iph_destip) << std::endl;

            // 출력: TCP 헤더 정보
            std::cout << "TCP Header:" << std::endl;
            std::cout << "Src Port: " << ntohs(tcp->th_sport) << std::endl;
            std::cout << "Dst Port: " << ntohs(tcp->th_dport) << std::endl;

            // 패킷 메시지 출력 (16바이트만 출력)
            int messageLength = ntohs(ip->iph_len) - ip->iph_ihl * 4 - tcp->th_off * 4;
            if (messageLength > 0) {
                std::cout << "Message : ";
                for (int i = 0; i < std::min(messageLength, 16); i++) {
                    printf("%02x ", packet[sizeof(struct ethheader) + ip->iph_ihl * 4 + tcp->th_off * 4 + i]);
                }
                std::cout << std::endl;
            }
            
            std::cout << std::endl;
        }
    }
}

int main() {
    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];

    // Step 1: Open live pcap session on NIC with name enp0s3
    handle = pcap_open_live("ens33", BUFSIZ, 1, 1000, errbuf);

    // Step 2: Capture packets and process them
    if (handle == nullptr) {
        std::cerr << "Error opening pcap session: " << errbuf << std::endl;
        return 1;
    }

    while (true) {
        struct pcap_pkthdr header;
        const u_char *packet = pcap_next(handle, &header);

        processPacket(&header, packet);
    }

    pcap_close(handle); // Close the pcap session (This line will not be reached in the loop)
    return 0;
}
